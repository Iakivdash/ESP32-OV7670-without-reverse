#include "OV7670.h"

#include <Adafruit_GFX.h>    // Adafruit_GFX_Library version1.3.6
//#include <Adafruit_ST7735.h> // Adafruit_ST7735_and_7739_Library verion1.2.6

#include "WiFi.h"
#include "WiFiClient.h"
#include "BMP.h"

const int SIOD = 21; //SDA
const int SIOC = 22; //SCL

const int VSYNC = 34;
const int HREF = 35;

const int XCLK = 32;
const int PCLK = 33;

const int D0 = 27;
const int D1 = 17;
const int D2 = 16;
const int D3 = 15;
const int D4 = 14;
const int D5 = 13;
const int D6 = 12;
const int D7 = 4;

const int TFT_DC = 2;
const int TFT_CS = 5;
//DIN <- MOSI 23
//CLK <- SCK 18

#define ssid       ""  // Set your ssid
#define password   "" // Set your password

//Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS,  TFT_DC, 0/*no reset*/);
OV7670 *camera;

WiFiServer server(80);

unsigned char bmpHeader[BMP::headerSize];

void reconnect()
{
       if (WiFi.status() != WL_CONNECTED)                //если нет соединения с WIFI
       {
         WiFi.begin(ssid, password);            // ввод имени точки доступа и пароля
        delay(1000); 
       }
}

void serve()
{
  int i = 0; int j = 0;int k = 0;
  int sm, sm1;
  int x_res, y_res;
  x_res = camera->xres;
  y_res = camera->yres;
  uint8_t b1;
  WiFiClient client = server.available();
  if (client)
  {
    Serial.println("New Client.");
    String currentLine = "";
    while (client.connected())
    {
      if (client.available())
      {
        char c = client.read();
        Serial.write(c);
        if (c == '\n')
        {
          if (currentLine.length() == 0)
          {
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();

            // Displays the site's title and a button to snap
            client.println("<!DOCTYPE html>");
            client.println("<html>");
            client.println("<head>");
            client.println("<meta name='viewport' content='initial-scale=1.5'>");
            client.println("</head>");
            client.println("<body>");
            client.println("<form method='get'>");
            client.println("<font size='4'>ESP-WROOM-32<br>");
            client.println("Wi-Fi Camera01</font><br>");
            client.println("<br>");
            client.println("<input type='submit' name=0 value='snap'>");
            client.println("</form>");
            client.println("</body>");
            client.println("</html>");

            client.println();
            break;
          }
          else
          {
            currentLine = "";
          }
        }
        else if (c != '\r')
        {
          currentLine += c;
        }

        if (currentLine.endsWith("GET /?0=snap"))
        {
          Serial.println();
          Serial.println("Sending BMP Image");
          client.println("HTTP/1.1 200 OK");
          client.println("Content-type:image/bmp");
          client.println();

        
          // BMP data have to be sent in reverse order.
          
         
         
          for(int k=0;k<y_res/2;k++)
          {
            for(int j=0;j<x_res*2;j++)
            {
             sm=j+k*x_res*2;
             sm1=j+(y_res-k-1)*x_res*2; 
             b1=camera->frame[sm];
            camera->frame[sm]=camera->frame[sm1];
            camera->frame[sm1]=b1; 
            }
          } 
              
          client.write(bmpHeader, BMP::headerSize);   
          client.write(camera->frame, camera->xres *camera->yres * 2);
          
        }
      }
    }
    // close the connection:
    client.stop();
    //Serial.println("Client Disconnected.");
  }
}

void setup()
{
  uint8_t mac[6];
  char buf[33];
   pinMode(LED_BUILTIN, OUTPUT);
  Serial.begin(115200);

  WiFi.begin(ssid, password);;
  Serial.println();
  Serial.print("Connecting to ");
  Serial.print(ssid);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
   
  }

  Serial.println("");   // Send the IP address
  Serial.println("WiFi connected.");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
 
  camera = new OV7670(OV7670::Mode::QQVGA_RGB565, SIOD, SIOC, VSYNC, HREF, XCLK, PCLK, D0, D1, D2, D3, D4, D5, D6, D7);
  BMP::construct16BitHeader(bmpHeader, camera->xres, camera->yres);
  delay(2000);
  delay(2000);

  server.begin();
   delay(1000);
}



void loop()
{
  reconnect();
  camera->oneFrame();
  serve();
}
